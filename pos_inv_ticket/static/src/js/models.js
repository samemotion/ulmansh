odoo.define('pos_inv_ticket.models', function (require) {
    "use strict";

    var BarcodeParser = require('barcodes.BarcodeParser');
    var PosDB = require('point_of_sale.DB');
    var devices = require('point_of_sale.devices');
    var core = require('web.core');
    // var Model = require('web.DataModel');
    var rpc = require('web.rpc')
    // var formats = require('web.formats');
    var session = require('web.session');
    var time = require('web.time');
    var utils = require('web.utils');
    
    var QWeb = core.qweb;
    var _t = core._t;
    var Mutex = utils.Mutex;
    var round_di = utils.round_decimals;
    var round_pr = utils.round_precision;
    
    var models = require('point_of_sale.models');

    var _super_order = models.Order.prototype;


    models.Order = models.Order.extend({
        initialize: function(attributes,options){            
            var self = this;
            options  = options || {};
    
            this.to_ticket      = false; // MGQ
            this.info = false;

            return _super_order.initialize.call(this, attributes, options);
        },

        init_from_JSON: function(json) {
            this.to_ticket = false;    // FIXME
            return _super_order.init_from_JSON.call(this, json);
        },
        /* ---- Ticket --- */
        set_to_ticket: function(to_ticket) {
            this.assert_editable();
            this.to_ticket = to_ticket;
        },
        is_to_ticket: function(){
            return this.to_ticket;
        },        
        get_total_with_tax: function() {
            var pos_price_digits = this.pos.dp['POS Price'];
            // alert(round_di(this.get_total_without_tax() + this.get_total_tax(),pos_price_digits));
            return round_di(this.get_total_without_tax() + this.get_total_tax(),pos_price_digits);
        },
    });

    models.PosModel = models.PosModel.extend({
        push_and_invoice_order: function(order){
            //_super_posmodel.push_and_invoice_order.call(this, order);
            var self = this;
            var invoiced = new $.Deferred(); 
    
            if(!order.get_client()){
                invoiced.reject({code:400, message:'Missing Customer', data:{}});
                return invoiced;
            }
    
            var order_id = this.db.add_order(order.export_as_JSON());
    
            this.flush_mutex.exec(function(){
                var done = new $.Deferred(); // holds the mutex
                //alert('Ticket is: ' + order.is_to_ticket() + ', Invoice is: ' + order.is_to_invoice());
                if (order.is_to_invoice()) {
                    var transfer = self._flush_orders([self.db.get_order(order_id)], {timeout:30000, to_invoice:true, to_ticket:false});
                } else if (order.is_to_ticket()) {
                    var transfer = self._flush_orders([self.db.get_order(order_id)], {timeout:30000, to_ticket:true, to_invoice:false});
                }
                transfer.fail(function(error){
                    invoiced.reject(error);
                    done.reject();
                });
    
                // on success, get the order id generated by the server
                transfer.pipe(function(order_server_id){    

                    if (order.is_to_invoice()) {
                        // //alert('is_to_invoice :' + order_server_id);
                        // self.chrome.do_action('l10n_pe_einvoicing_point_of_sale.pos_invoice_format',{additional_context:{ 
                        // //self.chrome.do_action('point_of_sale.pos_invoice_report',{additional_context:{ 
                        //     active_ids:order_server_id,
                        // }}).done(function () {
                        //     invoiced.resolve();
                        //     done.resolve();
                        // });    
                        invoiced.resolve();    
                        done.resolve();            
                    } else if (order.is_to_ticket()) {
                        // //alert('is_to_ticket :' + order_server_id);
                        // self.chrome.do_action('l10n_pe_einvoicing_point_of_sale.pos_ticket_format',{additional_context:{ 
                        // //self.chrome.do_action('l10n_pe_einvoicing_point_of_sale.pos_invoice_report',{additional_context:{ 
                        //         active_ids:order_server_id,
                        // }}).done(function () {
                        //     invoiced.resolve();
                        //     done.resolve();
                        // });
                        invoiced.resolve();    
                        done.resolve();
                    }

                    
                    // generate the pdf and download it
                    // self.chrome.do_action('l10n_pe_einvoicing_point_of_sale.pos_electronic_invoice_tformat_mr_report',{additional_context:{ 
                    //     active_ids:order_server_id,
                    // }}).done(function () {
                    //     invoiced.resolve();
                    //     done.resolve();
                    // });
                });
    
                return done;
    
            });    
            return invoiced;
        },
    });
});

